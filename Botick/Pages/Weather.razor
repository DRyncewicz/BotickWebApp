@page "/weather"
@using Botick.Shared
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net
@inject IHttpClientFactory HttpClientFactory
@inject IAccessTokenProvider AccessTokenProvider

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string errorMessage = "";
    private string displayedToken = "";

    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await AccessTokenProvider.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token))
        {

            var httpClient = HttpClientFactory.CreateClient("ServerAPI");
            try
            {
                forecasts = await httpClient.GetFromJsonAsync<WeatherForecast[]>("weatherforecast");
            }
            catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Unauthorized)
            {
                errorMessage = "Unauthorized access. Please log in.";
            }
        }
        else
        {
            errorMessage = "Token not available. Please log in.";
        }
    }
}
